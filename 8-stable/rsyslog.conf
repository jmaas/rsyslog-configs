#
# /etc/rsyslog.conf - global configuration file
#
# Author/maintainer: JÃ¶rgen Maas <jorgen.maas@gmail.com>
# https://github.com/jmaas/rsyslog-configs/8-stable/
#


#
# Global settings
# ---------------
# If you're gonna use TLS based transports you need to make sure
# that you have created a valid certificate chain. The README file
# describes one way how to accomplish this.
#
# Certificates are stored in /etc/rsyslog.d/keys so that SELinux
# labeling works without additional fiddeling with SELinux.
#

global(
    # set a liberal umask here - to be overriden in output actions
    umask="0000"

    # working directory - temp/state files are stored here
    workDirectory="/var/lib/rsyslog"
   
    # truncate messages after 4kb
    maxMessageSize="4k"

    # do not interfere with log flow
    dropMsgsWithMaliciousDNSPtrRecords="off"
    preserveFQDN="on"

    # drop privileges
    privdrop.user.name="_rsyslogd"
    privdrop.group.name="_rsyslogd"

    # set the hostname you want to use for this system (optional)
    #localHostname=""

    # TLS
    #defaultNetstreamDriver="gtls"
    #defaultNetstreamDriverCAFile="/etc/rsyslog.d/keys/rootCA.crt"
    #defaultNetstreamDriverCertFile="/etc/rsyslog.d/keys/logmanagement-client.crt"
    #defaultNetstreamDriverKeyFile="/etc/rsyslog.d/keys/logmanagement-client.key"
)


#
# Built-in modules
# ----------------
# Explicitly load builtin modules for completeness.
#

module(
    load="builtin:omfwd"
)

module(
    load="builtin:omfile"
)

module(
    load="builtin:ompipe"
)


#
# Main message queue (input)
# --------------------------
# There is a single main message queue inside rsyslog. Each input module delivers messages to it.
# The main message queue worker filters messages based on rules specified in rsyslog.conf and 
# dispatches them to the individual action queues. Once a message is in an action queue, 
# it is deleted from the main message queue.
#
# Pick one depending on sizing requirements, or create your own.
# - Small: /etc/rsyslog.d/input-queue-s.conf
# - Medium: /etc/rsyslog.d/input-queue-m.conf
# - Large: /etc/rsyslog.d/input-queue-l.conf
# - Extra large: /etc/rsyslog.d/input-queue-xl.conf
#
$IncludeConfig /etc/rsyslog.d/input-queue-l.conf


#
# Use-cases
# ---------
# You *MUST* uncomment all IncludeConfig entries associated with a
# single use-case in order to enable rsyslog functionality.
#

#
# uc#1 - local logging only
# -------------------------
# This configuration gathers log from the systemd journal and the traditional syslog socket and writes
# it's output to local files only. This setup is most common for environments where central logging is
# not required (eg. your personal laptop). 
#
#$IncludeConfig /etc/rsyslog.d/input_journald.conf
#$IncludeConfig /etc/rsyslog.d/input_uxsocket.conf
#$IncludeConfig /etc/rsyslog.d/output_file_client.conf

#
# uc#2 - local logging + traditional forwarding (syslog/udp)
# ----
# Like the first use-case but also sends log using the traditional syslog forwarding method (syslog over UDP).
# Forwarding syslog over UDP is the most unreliable forwarding method available. It's also the most common 
# and best supported forwarding method, if your log server supports better protocols like TCP or TLS use that instead
#
#$IncludeConfig /etc/rsyslog.d/input_journald.conf
#$IncludeConfig /etc/rsyslog.d/input_uxsocket.conf
#$IncludeConfig /etc/rsyslog.d/output_file_client.conf
#$IncludeConfig /etc/rsyslog.d/forward_syslog_udp.conf

#
# uc#3 - local logging + improved forwarding (syslog/tcp)
# -------------------------------------------------------
# Like the previous use-case but using TCP as the forwarding protocol. This method has a higher level of 
# reliability because rsyslog can now detect when the destination is unavailable. In this case log messages
# will be queued and resend when the destination becomes available again. Although a lot better than using
# UDP; but still there's no 100% guarentee that messages can't be lost. 
#
#$IncludeConfig /etc/rsyslog.d/input_journald.conf
#$IncludeConfig /etc/rsyslog.d/input_uxsocket.conf
#$IncludeConfig /etc/rsyslog.d/output_file_client.conf
#$IncludeConfig /etc/rsyslog.d/forward_syslog_tcp.conf

#
# uc#4 - local logging + secure forwarding (syslog/tls)
# -----------------------------------------------------
# This use-case implements local logging with secure (TLS) forwarding. This method of forwarding is pretty
# good when dealing with strict requirements regarding confidentiality, integrity and authenticity (CIA) of logs.
# Unfortunately this method does also suffer from the same limitations as the TCP forwarding use-case,
# there's still no guarantee that messages can't be lost. 
#
#$IncludeConfig /etc/rsyslog.d/input_journald.conf
#$IncludeConfig /etc/rsyslog.d/input_uxsocket.conf
#$IncludeConfig /etc/rsyslog.d/output_file_client.conf
#$IncludeConfig /etc/rsyslog.d/forward_syslog_tls.conf

#
# uc#5 - local logging + reliable forwarding (relp/tls)
# -----------------------------------------------------
# This use-case implements local logging with reliable forwarding (RELP over TLS). This method of forwarding is
# the most reliable in terms of log delivery (RELP) as well as confidentiality, integrity and authenticity (TLS).
# This is the recommended configuration when you need to forward logs to a central server.
#
#$IncludeConfig /etc/rsyslog.d/input_journald.conf
#$IncludeConfig /etc/rsyslog.d/input_uxsocket.conf
#$IncludeConfig /etc/rsyslog.d/output_file_client.conf
#$IncludeConfig /etc/rsyslog.d/forward_syslog_relp.conf

#
# uc#6 - local logging + named pipe
# ---------------------------------
# This use-case gathers log from the systemd journal and the traditional syslog socket and writes
# it's output to local files and also to a named pipe (fifo). 
#
#$IncludeConfig /etc/rsyslog.d/input_journald.conf
#$IncludeConfig /etc/rsyslog.d/input_uxsocket.conf
#$IncludeConfig /etc/rsyslog.d/output_file_client.conf
#$IncludeConfig /etc/rsyslog.d/output_pipe.conf

#
# uc#7 - log collector + reliable forwarding
# ------------------------------------------
# This use-case implements a log collector server which can receive syslog on UDP, TCP, TLS and RELP.
# Additionally it forwards all log to a central log server using RELP over TLS.
#
#$IncludeConfig /etc/rsyslog.d/input_journald.conf
#$IncludeConfig /etc/rsyslog.d/input_uxsocket.conf
#$IncludeConfig /etc/rsyslog.d/input_syslog_udp.conf
#$IncludeConfig /etc/rsyslog.d/input_syslog_tcp.conf
#$IncludeConfig /etc/rsyslog.d/input_syslog_tls.conf
#$IncludeConfig /etc/rsyslog.d/input_syslog_relp.conf
#$IncludeConfig /etc/rsyslog.d/forward_syslog_relp.conf

# EOF
